{"version":3,"sources":["components/App/index.module.scss","components/ExchangeRates/index.module.scss","components/AppContainer/index.module.scss","api.ts","redux/appSlice.ts","redux/store.ts","components/AppContainer/index.tsx","components/Converter/index.tsx","components/ExchangeRates/index.tsx","components/App/index.tsx","index.tsx"],"names":["module","exports","axiosInstance","axios","create","baseURL","timeout","interceptors","request","use","config","params","apikey","process","api","baseCurrency","get","base_currency","response","data","initialState","amount","loading","error","targetCurrency","localeCurrency","getCurrency","window","navigator","language","fetchBaseCurrency","createAsyncThunk","arg","a","switchCurrencies","getState","dispatch","app","query","setTargetCurrency","appSlice","createSlice","name","reducers","state","action","payload","setAmount","match","extraReducers","builder","addCase","fulfilled","pending","rejected","message","actions","store","configureStore","reducer","devTools","useAppSelector","useSelector","AppContainer","className","children","rest","cn","styles","main","Converter","useDispatch","options","useMemo","Object","keys","map","currency","key","value","text","Container","as","textAlign","Input","onChange","e","target","icon","label","fluid","Dropdown","placeholder","search","selection","Button","onClick","Icon","disabled","Label","size","color","parseFloat","toFixed","negative","ExchangeRates","Segment","List","animated","divided","relaxed","list","Item","Content","floated","verticalAlign","Dimmer","active","inverted","fixed","Loader","App","location","useLocation","Menu","header","MenuItem","pathname","Link","to","index","element","path","lc","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.b4f5cc20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__1UEVW\",\"header\":\"App_header__12d7c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"ExchangeRates_main__AjJeg\",\"list\":\"ExchangeRates_list__324od\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"AppContainer_main__rxi6n\",\"mount\":\"AppContainer_mount__3Qtv-\"};","import axios from \"axios\";\n\nconst axiosInstance = axios.create({\n    baseURL: 'https://freecurrencyapi.net/api/v2/',\n    timeout: 10000,\n});\n\naxiosInstance.interceptors.request.use(config => {\n    config.params.apikey = process.env.REACT_APP_API_KEY;\n    return config;\n})\n\nexport interface ICurrencyData {\n    query: {\n        base_currency: string;\n        timestamp: number;\n    },\n    data: {\n        [key: string]: number;\n    }\n}\n\ninterface ICurrencyApi {\n    getLatest: (baseCurrency: string) => Promise<ICurrencyData>;\n}\n\nexport const api: ICurrencyApi = {\n    async getLatest (baseCurrency: string) {\n        try {\n            const response = await axiosInstance.get('/latest', {\n                params: {\n                    base_currency: baseCurrency\n                }\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {api, ICurrencyData} from \"../api\";\nimport {RootState, AppDispatch} from './store';\nimport localeCurrency from \"locale-currency\";\n\ninterface IConverterSlice {\n    amount: string;\n    loading: boolean;\n    error: string | null;\n    targetCurrency: string;\n    data: ICurrencyData | null;\n}\n\nconst initialState: IConverterSlice = {\n    amount: '10.23',\n    loading: false,\n    error: null,\n    targetCurrency: localeCurrency.getCurrency(window.navigator.language) === 'USD' ? 'RUB' : 'USD',\n    data: null,\n}\n\nexport const fetchBaseCurrency = createAsyncThunk<ICurrencyData, string, {state: RootState, dispatch: AppDispatch}>(\n    'app/fetchBaseCurrency',\n    async (arg) => {\n        const data = await api.getLatest(arg);\n        data.data[arg] = 1;\n        return data;\n    }\n);\n\nexport const switchCurrencies = createAsyncThunk<unknown, void, {state: RootState, dispatch: AppDispatch}>(\n    'app/fetchData',\n    async (arg, {getState, dispatch}) => {\n        const {targetCurrency, data} = getState().app;\n        const baseCurrency = data?.query.base_currency;\n        if (baseCurrency) {\n            await dispatch(fetchBaseCurrency(targetCurrency));\n            dispatch(setTargetCurrency(baseCurrency));\n        }\n    }\n);\n\nexport const appSlice = createSlice({\n    name: 'app',\n    initialState,\n    reducers: {\n        setTargetCurrency (state, action: PayloadAction<string>) {\n            state.targetCurrency = action.payload;\n        },\n        setAmount (state, {payload}: PayloadAction<string>) {\n            if (payload.match(/^[0-9]*[.]?[0-9]*$/g)) {\n                state.amount = payload;\n            }\n        }\n    },\n        extraReducers: (builder) => {\n            builder\n                .addCase(fetchBaseCurrency.fulfilled, (state, action) => {\n                    state.data = action.payload;\n                    state.loading = false;\n                    state.error = null;\n                })\n                .addCase(fetchBaseCurrency.pending, state => {\n                    state.loading = true;\n                })\n                .addCase(fetchBaseCurrency.rejected, (state, {error}) => {\n                    state.loading = false;\n                    state.error = error.message || 'Something went wrong :(';\n                })\n        }\n});\n\nexport const {setTargetCurrency, setAmount} = appSlice.actions;\nexport default appSlice.reducer;\n","import {Action, configureStore, ThunkAction} from '@reduxjs/toolkit';\nimport {appSlice} from \"./appSlice\";\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\n\n\nexport const store = configureStore({\n    reducer: {\n        app: appSlice.reducer\n    },\n    devTools: process.env.NODE_ENV === 'development'\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n    >;","import React from 'react';\nimport styles from './index.module.scss';\nimport cn from \"classnames\";\n\ninterface IProps {\n    className?: string;\n    [key: string]: any;\n}\n\nconst AppContainer: React.FC<IProps> = ({className, children, ...rest}) => {\n    return (\n        <div className={cn(styles.main, className)} {...rest}>\n            {children}\n        </div>\n    );\n};\n\nexport default AppContainer;\n","import React, {ChangeEvent, useMemo} from 'react';\nimport {Button, Container, Dropdown, Icon, Input, Label} from 'semantic-ui-react';\nimport {useAppDispatch, useAppSelector} from '../../redux/store';\nimport {setAmount, fetchBaseCurrency, setTargetCurrency, switchCurrencies} from '../../redux/appSlice';\nimport AppContainer from \"../AppContainer\";\n\nconst Converter = () => {\n    const dispatch = useAppDispatch();\n    const {amount, data, loading, error, targetCurrency} = useAppSelector(state => state.app);\n\n    const inputHandler = (e: ChangeEvent<HTMLInputElement>) => {\n            dispatch(setAmount(e.target.value));\n    }\n    const options = useMemo(() => {\n        if (data?.data) {\n            return Object.keys(data.data).map((currency) => ({\n                key: currency,\n                value: currency,\n                text: currency,\n            }))\n        } else {\n            return [];\n        }\n    }, [data]);\n\n    return (\n        <AppContainer>\n            <Container as={'h1'} textAlign={'center'}>\n                Currency converter\n            </Container>\n            <Input\n                value={amount}\n                onChange={inputHandler}\n                icon={'money'}\n                label={'Amount'}\n                fluid/>\n            <Dropdown\n                placeholder={'Select base currency'}\n                fluid\n                search\n                selection\n                value={data?.query.base_currency}\n                options={options}\n                loading={loading}\n                onChange={(e, {value}) => dispatch(fetchBaseCurrency(value as string))}\n            >\n            </Dropdown>\n            <Button onClick={() => dispatch(switchCurrencies())}>\n                <Icon name={'arrow up'} />\n                <Icon name={'arrow down'} />\n            </Button>\n            <Dropdown\n                placeholder={'Select target currency'}\n                fluid\n                search\n                selection\n                value={targetCurrency}\n                options={options}\n                disabled={loading}\n                onChange={(e, {value}) => dispatch(setTargetCurrency(value as string))}\n            />\n            <Label size={'big'} color={'teal'}>\n                {'Total: '}\n                {\n                    data?.data[targetCurrency] && amount ? ((data?.data[targetCurrency]) * parseFloat(amount)).toFixed(2) : ''\n                }\n            </Label>\n            {\n                error &&\n                <>\n                    <Button\n                        negative\n                        fluid\n                        onClick={() => dispatch(fetchBaseCurrency('USD'))}>\n                        Try again\n                    </Button>\n                    <Container textAlign={'center'} as={'p'}>{error}</Container>\n                </>\n\n            }\n        </AppContainer>\n    );\n};\n\nexport default Converter;\n","import React from 'react';\nimport {useAppSelector} from \"../../redux/store\";\nimport styles from './index.module.scss';\nimport {Container, Dimmer, List, Loader, Segment} from \"semantic-ui-react\";\nimport CurrencyFlagImage from \"react-currency-flags\";\nimport AppContainer from \"../AppContainer\";\n\nconst ExchangeRates = () => {\n    const {data} = useAppSelector(state => state.app);\n\n    return (\n        <AppContainer className={styles.main}>\n            <Container as={'h1'} textAlign={'center'}>\n                Exchange rates\n            </Container>\n            {\n\n            }\n            <Container textAlign={'center'}>Base currency: {data?.query.base_currency}</Container>\n            <Segment as={List} animated size={'large'} divided relaxed className={styles.list}>\n                {\n                    data ? Object.keys(data.data).map(currency =>\n                        <List.Item key={currency}>\n                            <List.Content floated={'right'}>{data.data[currency]}</List.Content>\n                            <List.Icon verticalAlign={\"middle\"}><CurrencyFlagImage currency={currency} /></List.Icon>\n                            <List.Content>{currency}</List.Content>\n                        </List.Item>)\n                        :\n                        <Dimmer active inverted fixed>\n                            <Loader size='large'>Loading</Loader>\n                        </Dimmer>\n                }\n\n            </Segment>\n        </AppContainer>\n    );\n};\n\nexport default ExchangeRates;\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport styles from './index.module.scss';\nimport Converter from '../Converter';\nimport {Link, Navigate, Route, Routes, useLocation} from 'react-router-dom';\nimport ExchangeRates from \"../ExchangeRates\";\nimport {Menu, MenuItem} from \"semantic-ui-react\";\n\nconst App = () => {\n    const location = useLocation();\n\n    return (\n        <div className={styles.main}>\n            <Menu\n                size={'large'}\n                fixed={'top'}\n                className={styles.header}>\n                <MenuItem\n                    active={'/' === location.pathname}\n                    as={Link}\n                    to={'/'}>\n                    Converter\n                </MenuItem>\n                <MenuItem\n                    as={Link}\n                    active={'/rates' === location.pathname}\n                    to={'/rates'}>\n                    Exchange rates\n                </MenuItem>\n            </Menu>\n            <Routes>\n                <Route index element={<Converter />}/>\n                <Route path={'rates'} element={<ExchangeRates />} />\n                <Route path={'*'} element={<Navigate to={'/'} />} />\n            </Routes>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport {BrowserRouter} from 'react-router-dom';\nimport {store} from './redux/store';\nimport { Provider } from 'react-redux';\nimport {fetchBaseCurrency} from './redux/appSlice';\nimport lc from 'locale-currency';\n\nstore.dispatch(fetchBaseCurrency(lc.getCurrency(window.navigator.language)));\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter basename={'/currency-converter'}>\n          <Provider store={store}>\n              <App />\n          </Provider>\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}